name: Check pull request

on: pull_request

env:
  # 実行する Gradle コマンド(プロジェクトによって調整してください。)
  GRADLE_KTLINT_TASK: 'ktlint'
  GRADLE_ANDROID_LINT_TASK: 'lint'
  GRADLE_UNIT_TEST_TASK: 'test --stacktrace'

jobs:
  #  check:
  #    name: Check pull request
  #    runs-on: ubuntu-18.04 # Java や Ruby を利用するので念の為、環境を固定
  #    steps:
  #      - name: Check out
  #        uses: actions/checkout@v2
  #        with:
  #          ref: ${{ github.event.pull_request.head.sha }}
  #      - name: Set up JDK
  #        uses: actions/setup-java@v1
  #        with:
  #          java-version: 1.8
  #      - name: Restore gradle cache # Gradle のキャッシュをリストア
  #        uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.gradle/caches
  #            ~/.gradle/wrapper
  #          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}
  #      - name: Set up Ruby # gem を利用するので Ruby をセットアップ
  #        uses: actions/setup-ruby@v1
  #        with:
  #          ruby-version: '2.6'
  #      - name: Get gem info
  #        env: # Danger で利用する gem をここで列挙
  #          PACKAGES: danger:6.2.0 danger-checkstyle_format:0.1.1 danger-android_lint:0.0.8 danger-junit:1.0.0
  #        id: gem-info
  #        run: |
  #          echo "::set-output name=dir::$(gem environment gemdir)" # キャッシュするgemのディレクトリ
  #          echo "::set-output name=packages::$PACKAGES" # install 用の文字列
  #          echo "::set-output name=key::$(echo $PACKAGES | tr ' ' '-')" # キャッシュのキー文字列
  #      - name: Restore gem cache # gem のキャッシュをリストア
  #        uses: actions/cache@v2
  #        with:
  #          path: ${{ steps.gem-info.outputs.dir }}
  #          key: ${{ runner.os }}-gem-${{ steps.gem-info.outputs.key }}
  #      - name: Run ktlint
  #        run: ./gradlew $GRADLE_KTLINT_TASK
  #      - name: Run Android Lint
  #        run: ./gradlew $GRADLE_ANDROID_LINT_TASK
  #      - name: Run Unit Test
  #        run: ./gradlew $GRADLE_UNIT_TEST_TASK
  #      - name: Set up and run Danger
  #        if: cancelled() != true # 中断されない限り、エラーでも実行
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 標準で利用できるトークンを利用
  #          JOB_STATUS: ${{ job.status }} # jobのステータスを Danger へ受け渡す
  #        run: |
  #          gem install ${{ steps.gem-info.outputs.packages }}
  #          danger --dangerfile='.github/workflows/check-pull-request.danger' --remove-previous-comments --fail-on-errors=true
  # Codecovアップロードタスク
  codecov:
    name: codecov upload
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [ 29 ]
        target: [ default ]
    steps:
      # チェックアウト
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # JDKのセットアップ
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Gradleのキャッシュ復元
      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # 依存関係の出力
      - name: Displays the Android dependencies of the project
        run: ./gradlew androidDependencies

      # Documentの更新
      - name: document update
        run: |
          ./gradlew dokka
      - name: git setting
        run: |
          git config --local user.email "hayashitoshiki"
          git config --local user.name "tosikihayasi@outlook.jp"
      - name: Commit files
        run: |
          git add .
          git commit -m “update document” -a
          git pull
          git push origin master

      # コンパイル
      - name: Run Compile
        run: ./gradlew assembleDebug

      # テスト
      - name: Test with Gradle
        run: ./gradlew test --stacktrace

      # コードカバレッジをJaCoCo形式で取得
      - name: Get code coverage for JaCoCo
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          script: ./gradlew jacocoTestReports

      # コードカバレッジをCodecovへアップロード
      - name: Upload code coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # テスト結果とコードカバレッジのアップロード
      - name: Upload test results and code coverage Artifact
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: results
          path: |
            **/build/reports/tests/**/*
            **/build/reports/test-results/**/*
            **/build/reports/jacoco/**/*
          if-no-files-found: warn
          retention-days: 14